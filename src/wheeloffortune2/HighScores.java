/*
* Wheel of Fortune
* ICS4U Final project
* Highscores screen
* June 11th 2025
 */
package wheeloffortune2;
//import statements

import java.io.File;
import java.io.FileNotFoundException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Scanner;

/**
 *
 * @author lauragarcia
 */
public class HighScores extends javax.swing.JFrame {
    //nested class to keep track of the highscore and the username together-used to sort the highscores and have the correct username correspond
    private class ScoreEntry {
        //encapsulatoin of attributes
        String username;
        int highscore;
        /**
         * Constructor for the class that will keep track of the usernames and highscores in the file
         * @param username String that defines the user
         * @param highscore Score at the end of the game
         */
        public ScoreEntry(String username, int highscore) {
            this.username = username;
            this.highscore = highscore;
        }
        /**
         * Accessor that return the username that is assigned to a player
         * @return String username
         */
        public String getUsername() {
            return username;
        }
        /**
         * Accessor that sets the highscore assigned to a player
         * @return int highscore
         */
        public int getHighscore() {
            return highscore;
        }
        
        
        
        
    }

    GamePlay mainScreen;

    private ArrayList<ScoreEntry> entries = new ArrayList<>();

    /**
     * Creates new form HighScores
     */
    public HighScores(GamePlay g) {
        initComponents();
        mainScreen = g;
        //invoke methods to sort highscores
        scanHighscores();
        //create a new arraylist with using the ScoreEntry class
        ArrayList<ScoreEntry> sorted;
        //if the size is less than or equal to one, they don't need to be sorted
        if (entries.size() <= 1) {
            sorted = new ArrayList<>(entries);
            
        } else {
            //otherwise, sort the file using the quicksort method
            sorted = (quickSort(entries, 0, entries.size() - 1));
        }

        sortedOutput(sorted);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        highscoresTextArea = new javax.swing.JTextArea();
        highScoreButton = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();
        quitButton1 = new javax.swing.JButton();
        highScoreButton1 = new javax.swing.JLabel();
        usernameTextField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        usernameOutputLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 51, 204));

        highscoresTextArea.setEditable(false);
        highscoresTextArea.setBackground(new java.awt.Color(255, 255, 102));
        highscoresTextArea.setColumns(20);
        highscoresTextArea.setFont(new java.awt.Font("MS UI Gothic", 0, 18)); // NOI18N
        highscoresTextArea.setForeground(new java.awt.Color(0, 51, 204));
        highscoresTextArea.setRows(5);
        jScrollPane1.setViewportView(highscoresTextArea);

        highScoreButton.setBackground(new java.awt.Color(255, 255, 102));
        highScoreButton.setFont(new java.awt.Font("MS UI Gothic", 1, 40)); // NOI18N
        highScoreButton.setForeground(new java.awt.Color(255, 255, 102));
        highScoreButton.setText(" HIGHSCORES");
        highScoreButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 102), 7, true));

        backButton.setBackground(new java.awt.Color(255, 255, 102));
        backButton.setFont(new java.awt.Font("MS UI Gothic", 1, 18)); // NOI18N
        backButton.setForeground(new java.awt.Color(0, 51, 204));
        backButton.setText("BACK");
        backButton.setToolTipText("");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        quitButton1.setBackground(new java.awt.Color(255, 255, 102));
        quitButton1.setFont(new java.awt.Font("MS UI Gothic", 1, 18)); // NOI18N
        quitButton1.setForeground(new java.awt.Color(0, 51, 204));
        quitButton1.setText("QUIT");
        quitButton1.setToolTipText("");
        quitButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitButton1ActionPerformed(evt);
            }
        });

        highScoreButton1.setBackground(new java.awt.Color(255, 255, 102));
        highScoreButton1.setFont(new java.awt.Font("MS UI Gothic", 1, 18)); // NOI18N
        highScoreButton1.setForeground(new java.awt.Color(255, 255, 102));
        highScoreButton1.setText("Search for a username:");

        usernameTextField.setBackground(new java.awt.Color(255, 255, 102));
        usernameTextField.setForeground(new java.awt.Color(0, 51, 204));

        searchButton.setBackground(new java.awt.Color(255, 255, 102));
        searchButton.setFont(new java.awt.Font("MS UI Gothic", 1, 14)); // NOI18N
        searchButton.setForeground(new java.awt.Color(0, 51, 204));
        searchButton.setText("Search");
        searchButton.setToolTipText("");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        usernameOutputLabel.setBackground(new java.awt.Color(255, 255, 102));
        usernameOutputLabel.setFont(new java.awt.Font("MS UI Gothic", 1, 18)); // NOI18N
        usernameOutputLabel.setForeground(new java.awt.Color(255, 255, 102));
        usernameOutputLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 124)));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(searchButton))
                                .addComponent(usernameOutputLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(highScoreButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(quitButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(146, 146, 146)
                        .addComponent(highScoreButton, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(highScoreButton, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(highScoreButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(usernameOutputLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(13, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(backButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(quitButton1)
                .addGap(108, 108, 108))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Method that scans the PlayerList file to use in the sorting/searching
     */
    public void scanHighscores() {
        try {
            //create a new file and scan it
            File f = new File("src/wheeloffortune2/playerList.txt");
            Scanner s = new Scanner(f);
            String playerInfo[];

            while (s.hasNextLine()) {
                //split the player information
                playerInfo = s.nextLine().split(" ");
                //add the player's username and highscore to the corresponding arrays
                //username.add(playerInfo[0]);
                //highscore.add(Integer.parseInt(playerInfo[1]));
                String name = playerInfo[0];
                int highscore = Integer.parseInt(playerInfo[1]);
                ScoreEntry entry = new ScoreEntry(name, highscore);
                entries.add(entry);
                
            }

        } catch (FileNotFoundException e) {
            System.out.println("Error " + e);
        }

    }

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        //go back to the gamePlay screen, create a new frame for it
        this.setVisible(false);
        GamePlay main = new GamePlay();
        main.setVisible(true);

    }//GEN-LAST:event_backButtonActionPerformed

    private void quitButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitButton1ActionPerformed
        //close GUI
        System.exit(0);
    }//GEN-LAST:event_quitButton1ActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        //new DecimalFormat for money formatting
        DecimalFormat money = new DecimalFormat("$0.00");
        //get what the user wants to search for
        String userInput = usernameTextField.getText();
        boolean equals = false;
        //look through the whole arrayList to see if the username can be found
        for (int i = 0; i < entries.size(); i++) {
            //create vars for the current usernames and highscores
            String currentU = entries.get(i).getUsername();
            String ScurrentH = String.valueOf(entries.get(i).getHighscore());
            int high = Integer.parseInt(ScurrentH);
            //check to see if any of the usernames equal input
            if (currentU.equalsIgnoreCase(userInput)) {
                //had to use this <html> formatting because jfield doesn't support \n
                usernameOutputLabel.setText("<html>Found!<br>Username: " + currentU + "<br>Highscore: " + money.format(high) + "</html>");
                equals = true;
            }
        }
        //output if the username isn't in the file
        if (!equals) {
            usernameOutputLabel.setText("User not found. Try again.");
        }

    }//GEN-LAST:event_searchButtonActionPerformed
    /**
     * QuickSort method that sorts the highscores in file from highest to lowest
     *
     * @param items the unsorted list of highscores
     * @param start first index in list
     * @param end last index in list
     * @return the sorted list of highscores
     */
    public static ArrayList quickSort(ArrayList<ScoreEntry> items, int start, int end) {
        //QuickSort code- Used Algorithm from ADA computer science
        if (start >= end) {
            return null;
        }

        int pivotValue = items.get(start).getHighscore(); // pivot is the first item in the partition
        int lowMark = start + 1;
        int highMark = end;
        boolean finished = false;

        while (!finished) {
            // Move lowMark to the right while items[lowMark] <= pivot
            while (lowMark >= highMark && items.get(lowMark).getHighscore() <= pivotValue) {
                lowMark++;
            }

            // Move highMark to the left while items[highMark] >= pivot
            while (highMark <= lowMark && items.get(highMark).getHighscore() >= pivotValue) {
                highMark--;
            }

            if (lowMark < highMark) {
                // Swap items at lowMark and highMark
                ScoreEntry temp = items.get(lowMark);
                items.set(lowMark, items.get(highMark));
                items.set(highMark, temp);
            } else {
                finished = true;
            }
        }

        // Swap pivot with item at highMark
        ScoreEntry temp = items.get(start);
        items.set(start, items.get(highMark));
        items.set(highMark, temp);

        // Recursively sort left and right partitions
        quickSort(items, start, highMark - 1);
        quickSort(items, highMark + 1, end);

        return items;
    }

    /**
     * Method that formats and outputs the formatted arrayList of the sorted
     * highscores
     *
     * @param sorted the arrayList that has the sorted highscore+usernames
     */
    public void sortedOutput(ArrayList<ScoreEntry> sorted) {
        //new money formatting
        DecimalFormat money = new DecimalFormat("$0.00");
        //make a variable for the output to add to the sorted arrayList
        String output = "";

        for (int i = 0; i < sorted.size(); i++) {
            //counter starts at 1
            int counter = i + 1;
            //get the sorted highscore at the specific index
            int out = sorted.get(i).getHighscore();
            //output
            output += (counter + ". " + money.format(out) + "      User: " + entries.get(i).getUsername() + "\n");

        }
        //set the output
        highscoresTextArea.setText(output);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JLabel highScoreButton;
    private javax.swing.JLabel highScoreButton1;
    private javax.swing.JTextArea highscoresTextArea;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton quitButton1;
    private javax.swing.JButton searchButton;
    private javax.swing.JLabel usernameOutputLabel;
    private javax.swing.JTextField usernameTextField;
    // End of variables declaration//GEN-END:variables
}
