/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package wheeloffortune2;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;

/**
 *
 * @author lauragarcia
 */
public class HighScores extends javax.swing.JFrame {

    GamePlay mainScreen;
    private ArrayList username;
    private ArrayList highscore;
    //add a searching method somehow???
    
    
    /**
     * Creates new form HighScores
     */
    public HighScores(GamePlay g) {
        initComponents();
        mainScreen = g;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        highscoresTextArea = new javax.swing.JTextArea();
        highScoreButton = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();
        quitButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 51, 204));

        highscoresTextArea.setEditable(false);
        highscoresTextArea.setBackground(new java.awt.Color(255, 255, 102));
        highscoresTextArea.setColumns(20);
        highscoresTextArea.setRows(5);
        jScrollPane1.setViewportView(highscoresTextArea);

        highScoreButton.setBackground(new java.awt.Color(255, 255, 102));
        highScoreButton.setFont(new java.awt.Font("MS UI Gothic", 1, 40)); // NOI18N
        highScoreButton.setForeground(new java.awt.Color(255, 255, 102));
        highScoreButton.setText(" HIGHSCORES");

        backButton.setBackground(new java.awt.Color(255, 255, 102));
        backButton.setFont(new java.awt.Font("MS UI Gothic", 1, 18)); // NOI18N
        backButton.setForeground(new java.awt.Color(0, 51, 204));
        backButton.setText("BACK");
        backButton.setToolTipText("");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        quitButton1.setBackground(new java.awt.Color(255, 255, 102));
        quitButton1.setFont(new java.awt.Font("MS UI Gothic", 1, 18)); // NOI18N
        quitButton1.setForeground(new java.awt.Color(0, 51, 204));
        quitButton1.setText("QUIT");
        quitButton1.setToolTipText("");
        quitButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 496, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(quitButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(146, 146, 146)
                        .addComponent(highScoreButton, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(highScoreButton, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(147, Short.MAX_VALUE)
                .addComponent(backButton)
                .addGap(26, 26, 26)
                .addComponent(quitButton1)
                .addGap(86, 86, 86))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void scanHighscores() {
        try {
            File f = new File("src/wheeloffortune2/playerList");
            Scanner s = new Scanner(f);
            int i=0;
            while (s.hasNextLine()) {
                i+=1;
                username.add(s.nextLine());
                highscore.add(Integer.parseInt(s.nextLine()));
            }
        } catch (FileNotFoundException e) {
            System.out.println("Error " + e);
        }

    }
    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        this.setVisible(false);
        GamePlay main = new GamePlay();
        main.setVisible(true);

    }//GEN-LAST:event_backButtonActionPerformed

    private void quitButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitButton1ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_quitButton1ActionPerformed
    public boolean binarySearch(int array[], int left, int right, int x) {
        int middle;
        if (left > right) {
            return false;
        }
        //determine the middle of this array section
        middle = (left + right) / 2;
        //is the middle what we are looking for?
        if (array[middle] == x) {
            return true;
        }
        //search the half of the array that might contain x
        if (array[middle] > x) { //search for x to the left
            return binarySearch(array, left, middle - 1, x);
        } else { //search for x to the right
            return binarySearch(array, middle + 1, right, x);
        }
    }
    public static int[] quickSort(int[] items, int start, int end) {
    // Base case for recursion:
    
    if (start >= end) {
        return new int[0];
    }
    // Otherwise recursively call the function
    else {
        int pivotValue = items[0]; // Set to first item in the partition
        int lowMark = start + 1; // Set to second position in the partition
        int highMark = end; // Set to last position in the partition
        int temp;
        boolean finished = false;

        // Repeat until low and high values have been swapped as needed
        while (finished == false) {
            // Move the left pivot
            while (lowMark <= highMark && items[lowMark] <= pivotValue) {
                lowMark = lowMark + 1; // Increment lowMark
            }

            // Move the right pivot
            while (items[highMark] >= pivotValue && highMark >= lowMark) {
                highMark = highMark - 1; // Decrement highMark
            }

            // Check that the low mark doesn't overlap with the high mark
            if (lowMark < highMark) {
                // Swap the values at lowMark and highMark
                temp = items[lowMark];
                items[lowMark] = items[highMark];
                items[highMark] = temp;
            }

            // Otherwise end the loop
            else {
                finished = true;
            }
        }

        // Swap the pivot value and the value at highMark
        temp = items[start];
        items[start] = items[highMark];
        items[highMark] = temp;

        // Recursive call on the left partition
        quickSort(items, start, highMark - 1);

        // Recursive call on the right partition
        quickSort(items, highMark + 1, end);

        return items;
    }
}
public void sortedOutput(){
    //int sortedItems[]=quickSort();
    ArrayList <String>output=new ArrayList<String>();
    for(int i=0;i<highscore.size();i++){
    }
}



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JLabel highScoreButton;
    private javax.swing.JTextArea highscoresTextArea;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton quitButton1;
    // End of variables declaration//GEN-END:variables
}
